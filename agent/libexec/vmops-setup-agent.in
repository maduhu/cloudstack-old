#!/usr/bin/env python

import sys, os, subprocess, errno, re

E_GENERIC= 1
E_NOKVM = 2
E_NODEFROUTE = 3
E_DHCP = 4
E_NOPERSISTENTNET = 5
E_NETRECONFIGFAILED = 6
E_VIRTRECONFIGFAILED = 7
E_FWRECONFIGFAILED = 8
E_AGENTRECONFIGFAILED = 9
E_AGENTFAILEDTOSTART = 10


def stderr(msgfmt,*args):
	msgfmt += "\n"
	if args: sys.stderr.write(msgfmt%args)
	else: sys.stderr.write(msgfmt)
	sys.stderr.flush()

def bail(errno=E_GENERIC,message=None,*args):
	if message: stderr(message,*args)
	stderr("VMOps Agent setup aborted")
	sys.exit(errno)


#---------------- boilerplate for python 2.4 support 


# CENTOS does not have this -- we have to put this here
try:
	from subprocess import check_call
	from subprocess import CalledProcessError
except ImportError:
	def check_call(*popenargs, **kwargs):
		import subprocess
		retcode = subprocess.call(*popenargs, **kwargs)
		cmd = kwargs.get("args")
		if cmd is None: cmd = popenargs[0]
		if retcode: raise CalledProcessError(retcode, cmd)
		return retcode

	class CalledProcessError(Exception):
		def __init__(self, returncode, cmd):
			self.returncode = returncode ; self.cmd = cmd
		def __str__(self): return "Command '%s' returned non-zero exit status %d" % (self.cmd, self.returncode)

# ------------ end boilerplate -------------------------


def check_kvm(): return check_call(["kvm-ok"])

class Command:
	def __init__(self,name,parent=None):
		self.__name = name
		self.__parent = parent
	def __getattr__(self,name):
		if name == "_print": name = "print"
		return Command(name,self)
	def __call__(self,*args):
		cmd = self.__get_recursive_name() + list(args)
		#print "	",cmd
		popen = subprocess.Popen(cmd,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
		m = popen.communicate()
		ret = popen.wait()
		if ret:
			e = CalledProcessError(ret,cmd)
			e.stdout,e.stderr = m
			raise e
		class CommandOutput:
			def __init__(self,stdout,stderr):
				self.stdout = stdout
				self.stderr = stderr
		return CommandOutput(*m)
	def __lt__(self,other):
		cmd = self.__get_recursive_name()
		#print "	",cmd,"<",other
		popen = subprocess.Popen(cmd,stdin=subprocess.PIPE,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
		m = popen.communicate(other)
		ret = popen.wait()
		if ret:
			e = CalledProcessError(ret,cmd)
			e.stdout,e.stderr = m
			raise e
		class CommandOutput:
			def __init__(self,stdout,stderr):
				self.stdout = stdout
				self.stderr = stderr
		return CommandOutput(*m)
		
	def __get_recursive_name(self,sep=None):
		m = self
		l = []
		while m is not None:
			l.append(m.__name)
			m = m.__parent
		l.reverse()
		if sep: return sep.join(l)
		else: return l
	def __str__(self):
		return '<Command %r>'%self.__get_recursive_name(sep=" ")
		
	def __repr__(self): return self.__str__()

ip = Command("ip")
service = Command("service")
ufw = Command("ufw")
augtool = Command("augtool")
kvmok = Command("kvm-ok")
ifconfig = Command("ifconfig")
uuidgen = Command("uuidgen")

#--------------- procedure starts here ------------

stderr("Welcome to the VMOps Agent setup")
stderr("")

try:
	service("vmops-agent","status")
except CalledProcessError,e:
	stderr("Stopping the VMOps Agent")
	m = service("vmops-agent","stop")
	print m.stdout + m.stderr
	stderr("VMOps Agent stopped")

stderr("Checking for KVM")
try:
	kvmok()
	stderr("KVM is properly set up")
except OSError,e:
	if e.errno is errno.ENOENT: bail(E_NOKVM,"KVM is not correctly installed on this system")
	raise
except CalledProcessError,e:
	stderr(e.stdout + e.stderr)
	bail(E_NOKVM,"KVM is not supported on this system")

brname = "vmops-br0"

alreadysetup = augtool.match("/files/etc/network/interfaces/iface",brname).stdout.strip()
if not alreadysetup:

	stderr("Determining default route")
	routes = ip.route().stdout.splitlines()
	defaultroute = [ x for x in routes if x.startswith("default") ]
	if not defaultroute: bail(E_NODEFROUTE,"Your network configuration does not have a default route")
	
	dev = defaultroute[0].split()[4]
	stderr("Default route assigned to device %s"%dev)

	automatic = augtool.match("/files/etc/network/interfaces/auto/*/",dev).stdout.strip()
	if not automatic: bail(E_NOPERSISTENTNET,"Device %s has not been set up in /etc/network/interfaces as automatic on boot",dev)
		
	inconfigfile = augtool.match("/files/etc/network/interfaces/iface",dev).stdout.strip()
	if not inconfigfile: bail(E_NOPERSISTENTNET,"Device %s has not been set up in /etc/network/interfaces",dev)

	isstatic = augtool.match(inconfigfile + "/method","static").stdout.strip()
	if not isstatic: bail(E_NOPERSISTENTNET,"Device %s has not been set up as a static device in /etc/network/interfaces",dev)

	stderr("Creating VMOps bridging device and making device %s member of this bridge",dev)

	backup = file("/etc/network/interfaces").read(-1)
	restore = lambda: file("/etc/network/interfaces","w").write(backup)

	script = """set %s %s
set %s %s
set %s/bridge_ports %s
save"""%(automatic,brname,inconfigfile,brname,inconfigfile,dev)
	
	stderr("Executing the following reconfiguration script:\n%s",script)
	
	try:
		returned = augtool < script
		if "Saved 1 file" not in returned.stdout:
			restore()
			bail(E_NETRECONFIGFAILED,"Network reconfiguration failed.")
		else:
			stderr("Network reconfiguration complete")
	except CalledProcessError,e:
		restore()
		print e.stdout + e.stderr
		bail(E_NETRECONFIGFAILED,"Network reconfiguration failed")

else:
	stderr("Network configuration appears to be already correctly setup")

stderr("We are going to restart the network now, to make the network changes take effect.  Hit ENTER when you are ready.")
raw_input()

stderr("Stopping NetworkManager")
try:
	o = service("network-manager","stop") ; print o.stdout + o.stderr
except CalledProcessError,e: print e.stdout + e.stderr

stderr("Starting networking")
try:
	o = service("networking","start") ; print o.stdout + o.stderr
except CalledProcessError,e:
	print e.stdout + e.stderr
	bail(E_NETRECONFIGFAILED,"The networking service did not start properly")

stderr("Verifying that the bridge is up")
try:
	o = ifconfig(brname) ; print o.stdout + o.stderr
except CalledProcessError,e:
	print e.stdout + e.stderr
	bail(E_NETRECONFIGFAILED,"The bridge could not be set up properly")

stderr("Networking restart done")

cgconfig = file("/etc/cgconfig.conf","r").read(-1)
if "group virt" in cgconfig:
	stderr("Control groups configuration appears to be already correctly setup")
else:
	stderr("Configuring control groups")
	cgconfig = cgconfig + """
group virt {
	cpu {
		cpu.shares = 9216;
	}
}
"""
	file("/etc/cgconfig.conf","w").write(cgconfig)
	stderr("Control groups configuration done")


line = "root:/usr/sbin/libvirtd	cpu	virt/"
cgrules = file("/etc/cgrules.conf","r").read(-1)
if line in cgrules:
	stderr("Control rules configuration appears to be already correctly setup")
else:
	stderr("Configuring control rules")
	cgrules = cgrules + "\n" + line + "\n"
	file("/etc/cgrules.conf","w").write(cgrules)
	stderr("Control rules configuration done")


line = "export CGROUP_DAEMON='cpu:/virt'"
libvirtbin = file("/etc/default/libvirt-bin","r").read(-1)
if line in libvirtbin:
	stderr("libvirt configuration appears to be already correctly setup")
else:
	stderr("Configuring libvirt")
	libvirtbin = libvirtbin + "\n" + line + "\n"
	file("/etc/default/libvirt-bin","w").write(libvirtbin)
	stderr("libvirt configuration done")


line = "cgroup_controllers = [ \"cpu\" ]"
libvirtqemu = file("/etc/libvirt/qemu.conf","r").read(-1)
if line in libvirtqemu:
	stderr("qemu configuration appears to be already correctly setup")
else:
	stderr("Configuring qemu")
	libvirtqemu = libvirtqemu + "\n" + line + "\n"
	file("/etc/libvirt/qemu.conf","w").write(libvirtqemu)
	stderr("qemu configuration done")


line = "security_driver = \"none\""
libvirtqemu = file("/etc/libvirt/qemu.conf","r").read(-1)
if line in libvirtqemu:
	stderr("qemu security configuration appears to be already correctly setup")
else:
	stderr("Configuring qemu security")
	libvirtqemu = libvirtqemu + "\n" + line + "\n"
	file("/etc/libvirt/qemu.conf","w").write(libvirtqemu)
	stderr("qemu security configuration done")


stderr("We are going to restart the virtualization services now, to make the configuration changes take effect.  Hit ENTER when you are ready.")
raw_input()

stderr("Stopping libvirt")
try:
	o = service("libvirt-bin","stop") ; print o.stdout + o.stderr
except CalledProcessError,e:
	print e.stdout + e.stderr
	bail(E_VIRTRECONFIGFAILED,"libvirt-bin failed to stop")

stderr("Stopping control rules")
try:
	o = service("cgred","stop") ; print o.stdout + o.stderr
except CalledProcessError,e:
	print e.stdout + e.stderr
	bail(E_VIRTRECONFIGFAILED,"cgred failed to stop")

stderr("Stopping control groups")
try:
	o = service("cgconfig","stop") ; print o.stdout + o.stderr
except CalledProcessError,e:
	print e.stdout + e.stderr
	bail(E_VIRTRECONFIGFAILED,"cgconfig failed to stop")

stderr("Starting control groups")
try:
	o = service("cgconfig","start") ; print o.stdout + o.stderr
except CalledProcessError,e:
	print e.stdout + e.stderr
	bail(E_VIRTRECONFIGFAILED,"cgconfig failed to start")

stderr("Starting control rules")
try:
	o = service("cgred","start") ; print o.stdout + o.stderr
except CalledProcessError,e:
	print e.stdout + e.stderr
	bail(E_VIRTRECONFIGFAILED,"cgred failed to start")

stderr("Restarting libvirt")
try:
	o = service("libvirt-bin","start") ; print o.stdout + o.stderr
except CalledProcessError,e:
	print e.stdout + e.stderr
	bail(E_VIRTRECONFIGFAILED,"libvirt-bin failed to start")

stderr("Setting up firewall rules to permit traffic to VMOps services")
try:
	ufw.allow("22")
	ufw.allow("1798")
	ufw.allow("16509")
	stderr("Rules set")
except CalledProcessError,e:
	print e.stdout+e.stderr
	bail(E_FWRECONFIGFAILED,"Firewall rules could not be set")

stderr("We are going to enable ufw now.  This may disrupt network connectivity and service availability.  See the ufw documentation for information on how to manage ufw firewall policies.")
try:
	o = ufw.enable < "y\n" ; print o.stdout + o.stderr
except CalledProcessError,e:
	print e.stdout+e.stderr
	bail(E_FWRECONFIGFAILED,"Firewall could not be enabled")

stderr("Examining agent configuration")
fn = "/etc/vmops/agent/agent.properties"
text = file(fn).read(-1)
lines = [ s.strip() for s in text.splitlines() ]
confopts = dict([ m.split("=",1) for m in lines if "=" in m and not m.startswith("#") ])
confposes = dict([ (m.split("=",1)[0],n) for n,m in enumerate(lines) if "=" in m and not m.startswith("#") ])

if not "guid" in confopts:
	stderr("Generating GUID for this agent")
	confopts['guid'] = uuidgen().stdout.strip()

try: host = confopts["host"]
except KeyError: host = "localhost"
stderr("Please enter the host name of the management server that this agent will connect to: (just hit ENTER to go with %s)",host)
newhost = raw_input().strip()
if newhost: host = newhost
confopts["host"] = host

confopts["private.network.device"] = brname
confopts["public.network.device"] = brname

for opt,val in confopts.items():
	line = "=".join([opt,val])
	if opt not in confposes: lines.append(line)
	else: lines[confposes[opt]] = line

text = "\n".join(lines)
try:	file(fn,"w").write(text)
except Exception: bail(E_AGENTRECONFIGFAILED,"Agent configuration failed")

stderr("")
stderr("VMOps Agent setup completed successfully")

stderr("Starting the VMOps Agent")
try:
	m = service("vmops-agent","start")
	print m.stdout + m.stderr
except CalledProcessError,e:
	print e.stdout + e.stderr
	bail(E_AGENTFAILEDTOSTART,"VMOps Agent failed to start")


# FIXMES: 1) nullify networkmanager (asking the user first) and enable the networking service permanently
# add augeas to the dependency list in rpm

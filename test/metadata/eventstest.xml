<events>

<!-- PREPARATION FOR EVENTS TEST - create 2 users, start 1 vm by both of them-->
	<command>
		<name>createUser</name>
		<parameters>
			<item random="true">
			    <name>username</name>
			</item>
			<item>
			    <name>password</name>
				<value>apiuser</value>
			</item>
			<item>
				<name>firstname</name>
				<value>apiuser</value>
			</item>
			<item>
				<name>lastname</name>
				<value>apiuser</value>
			</item>
			<item>
				<name>email</name>
				<value>apiuser@gmail.com</value>
			</item>
			<item>
				<name>accounttype</name>
				<value>0</value>
			</item>
		</parameters>
		<returnvalue>
			<item setparam="true">
				<name>id</name>
				<param>userid1</param>
			</item>
			<item setparam="true">
				<name>username</name>
				<param>usernamevar1</param>
			</item>
			<item setparam="true">
				<name>account</name>
				<param>accountvar1</param>
			</item>
		</returnvalue>
	</command>
	
	<command>
		<name>register</name>
		<parameters>
			<item getparam="true">
			    <name>username</name>
				<param>usernamevar1</param>
			</item>
			<item>
			    <name>domainid</name>
				<value>1</value>
			</item>
		</parameters>
		<returnvalue>
			<item setparam="true">
				<name>apikey</name>
				<param>apikey</param>
			</item>
			<item setparam="true">
				<name>secretkey</name>
				<param>secretkey</param>
			</item>
		</returnvalue>
	</command>
	
	
	<command>
		<name>deployVirtualMachine</name>
		<usercommand>true</usercommand>
		<parameters>
			<item>
			    <name>serviceofferingid</name>
				<value>1</value>
			</item>
			<item>
			    <name>diskofferingid</name>
				<value>1</value>
			</item>	
			<item getparam="true">
				<name>templateid</name>
				<param>globaltemplateid</param>
			</item>
			<item getparam="true">
			    <name>zoneid</name>
				<param>globalzoneid</param>
			</item>
		</parameters>
		<returnvalue>
			<item setparam="true">
				<name>ipaddress</name>
				<param>vmipaddress</param>
			</item>
			<item setparam="true">
				<name>id</name>
				<param>vmid</param>
			</item>
		</returnvalue>
	</command>
	
	<command>
		<name>createUser</name>
		<parameters>
			<item random="true">
			    <name>username</name>
			</item>
			<item>
			    <name>password</name>
				<value>apiuser</value>
			</item>
			<item>
				<name>firstname</name>
				<value>apiuser</value>
			</item>
			<item>
				<name>lastname</name>
				<value>apiuser</value>
			</item>
			<item>
				<name>email</name>
				<value>apiuser@gmail.com</value>
			</item>
			<item>
				<name>accounttype</name>
				<value>0</value>
			</item>
		</parameters>
		<returnvalue>
			<item setparam="true">
				<name>id</name>
				<param>userid2</param>
			</item>
			<item setparam="true">
				<name>username</name>
				<param>usernamevar2</param>
			</item>
			<item setparam="true">
				<name>account</name>
				<param>accountvar2</param>
			</item>
		</returnvalue>
	</command>
	
	<command>
		<name>register</name>
		<parameters>
			<item getparam="true">
			    <name>username</name>
				<param>usernamevar2</param>
			</item>
			<item>
			    <name>domainid</name>
				<value>1</value>
			</item>
		</parameters>
		<returnvalue>
			<item setparam="true">
				<name>apikey</name>
				<param>apikey</param>
			</item>
			<item setparam="true">
				<name>secretkey</name>
				<param>secretkey</param>
			</item>
		</returnvalue>
	</command>
	
	<command>
		<name>deployVirtualMachine</name>
		<usercommand>true</usercommand>
		<parameters>
			<item>
			    <name>serviceofferingid</name>
				<value>1</value>
			</item>
			<item>
			    <name>diskofferingid</name>
				<value>1</value>
			</item>	
			<item getparam="true">
				<name>templateid</name>
				<param>globaltemplateid</param>
			</item>
			<item getparam="true">
			    <name>zoneid</name>
				<param>globalzoneid</param>
			</item>
		</parameters>
		<returnvalue>
			<item setparam="true">
				<name>ipaddress</name>
				<param>vmipaddress</param>
			</item>
		</returnvalue>
	</command>

<!-- Test case 100 - verify listEvents with type parameter --> 
	<command>
		<name>listEvents</name>
		<testcase>100</testcase>
		<empty>true</empty>
		<parameters>
			<item>
				<name>type</name>
				<value>NET.RULEDELETE</value>
			</item>
			<item getparam="true">
				<name>account</name>
				<param>accountvar2</param>
			</item>
		</parameters>
	</command>
	
	<command>
		<name>listEvents</name>
		<testcase>100</testcase>
		<empty>false</empty>
		<parameters>
			<item>
				<name>type</name>
				<value>VM.START</value>
			</item>
			<item getparam="true">
				<name>account</name>
				<param>accountvar2</param>
			</item>
		</parameters>
	</command>
	
	
<!-- Test case 96 - verify that listEvents returns system events --> 
	<command>
		<name>listEvents</name>
		<testcase>96</testcase>
		<empty>false</empty>
		<parameters>
			<item>
				<name>account</name>
				<value>system</value>
			</item>
		</parameters>
	</command>
	
<!-- Test case 101 - verify listEvents with Level parameter --> 
	<command>
		<name>listEvents</name>
		<testcase>101</testcase>
		<usercommand>true</usercommand>
		<empty>true</empty>
		<parameters>
			<item>
				<name>level</name>
				<value>ERROR</value>
			</item>
			<item>
				<name>type</name>
				<value>NET.RULEADD</value>
			</item>
		</parameters>
	</command>
	
	<command>
		<name>listEvents</name>
		<testcase>101</testcase>
		<empty>false</empty>
		<parameters>
			<item>
				<name>type</name>
				<value>VM.START</value>
			</item>
			<item getparam="true">
				<name>userid</name>
				<param>userid1</param>
			</item>
		</parameters>
	</command>
	
<!-- Test case 103 - verify that you can list events for removed account --> 
	<command>
		<name>deleteUser</name>
		
		<parameters>
			<item getparam="true">
			    <name>id</name>
				<param>userid2</param>
			</item>
		</parameters>
	</command>	
	
	<command>
		<name>listEvents</name>
		<testcase>103</testcase>
		<parameters>
			<item getparam="true">
				<name>userid</name>
				<param>userid2</param>
			</item>
		</parameters>
	</command>
	

<!-- MAKE PREPARATIONS FOR ERROR EVENTS TESTING -->
	<command>
		<name>createUser</name>
		<parameters>
			<item random="true">
			    <name>username</name>
			</item>
			<item>
			    <name>password</name>
				<value>apiuser</value>
			</item>
			<item>
				<name>firstname</name>
				<value>apiuser</value>
			</item>
			<item>
				<name>lastname</name>
				<value>apiuser</value>
			</item>
			<item>
				<name>email</name>
				<value>apiuser@gmail.com</value>
			</item>
			<item>
				<name>accounttype</name>
				<value>0</value>
			</item>
		</parameters>
		<returnvalue>
			<item setparam="true">
				<name>username</name>
				<param>errorusername</param>
			</item>
			<item setparam="true">
				<name>account</name>
				<param>erroruseraccount</param>
			</item>
		</returnvalue>
	</command>
	
	<command>
		<name>register</name>
		<parameters>
			<item getparam="true">
			    <name>username</name>
				<param>errorusername</param>
			</item>
			<item>
			    <name>domainid</name>
				<value>1</value>
			</item>
		</parameters>
		<returnvalue>
			<item setparam="true">
				<name>apikey</name>
				<param>apikey</param>
			</item>
			<item setparam="true">
				<name>secretkey</name>
				<param>secretkey</param>
			</item>
		</returnvalue>
	</command>
	
<!--test case 188 - bring storage host down and try to deploy a virtual machine; Error event ROUTER.CREATE should be generated -->
	<command>
		<name>mysqlupdate</name>
		<mysqlcommand>update host set status="Down" where type="Routing"</mysqlcommand>
	</command>
	
	<command>
		<name>deployVirtualMachine</name>
		<testcase>188</testcase>
		<error>true</error>
		<usercommand>true</usercommand>
		<parameters>
			<item>
			    <name>serviceofferingid</name>
				<value>1</value>
			</item>
			<item>
			    <name>diskofferingid</name>
				<value>1</value>
			</item>	
			<item getparam="true">
				<name>templateid</name>
				<param>globaltemplateid</param>
			</item>
			<item getparam="true">
			    <name>zoneid</name>
				<param>globalzoneid</param>
			</item>
		</parameters>
	</command>
	
	
	
<!-- Bring storage host back, deploy 2 VMs, stop one of them, associate 1 ip address, add security group, add network rule, stop a domR; create a snapshot/private template -->
	<command>
		<name>mysqlupdate</name>
		<mysqlcommand>update host set status="Up" where type="Routing"</mysqlcommand>
	</command>

	<command>
		<name>deployVirtualMachine</name>
		<usercommand>true</usercommand>
		<parameters>
			<item>
			    <name>serviceofferingid</name>
				<value>1</value>
			</item>
			<item>
			    <name>diskofferingid</name>
				<value>1</value>
			</item>	
			<item getparam="true">
				<name>templateid</name>
				<param>globaltemplateid</param>
			</item>
			<item getparam="true">
			    <name>zoneid</name>
				<param>globalzoneid</param>
			</item>
		</parameters>
		<returnvalue>
			<item setparam="true">
				<name>ipaddress</name>
				<param>errorvmipaddress1</param>
			</item>
			<item setparam="true">
				<name>id</name>
				<param>errorvmid1</param>
			</item>
		</returnvalue>
	</command>

	<command>
		<name>deployVirtualMachine</name>
		<usercommand>true</usercommand>
		<parameters>
			<item>
			    <name>serviceofferingid</name>
				<value>1</value>
			</item>
			<item>
			    <name>diskofferingid</name>
				<value>1</value>
			</item>	
			<item getparam="true">
				<name>templateid</name>
				<param>globaltemplateid</param>
			</item>
			<item getparam="true">
			    <name>zoneid</name>
				<param>globalzoneid</param>
			</item>
		</parameters>
		<returnvalue>
			<item setparam="true">
				<name>ipaddress</name>
				<param>errorvmipaddress2</param>
			</item>
			<item setparam="true">
				<name>id</name>
				<param>errorvmid2</param>
			</item>
		</returnvalue>
	</command>
	
	<command>
		<name>stopVirtualMachine</name>
		<parameters>
			<item getparam="true">
				<name>id</name>
				<param>errorvmid2</param>
			</item>
		</parameters>
	</command>
	
	<command>
		<name>listVolumes</name>
		<parameters>
			<item getparam="true">
				<name>virtualmachineid</name>
				<param>errorvmid2</param>
			</item>
			<item>
				<name>type</name>
				<value>ROOT</value>
			</item>
		</parameters>
		<returnvalue>
			<item setparam="true">
				<name>id</name>
				<param>volumeid</param>
			</item>
		</returnvalue>
	</command>
	
	<command>
		<name>createSnapshot</name>
		<usercommand>true</usercommand>
		<parameters>
			<item getparam="true">
				<name>volumeid</name>
				<param>volumeid</param>
			</item>
		</parameters>
		<returnvalue>
			<item setparam="true">
				<name>id</name>
				<param>snapshotid</param>
			</item>
		</returnvalue>
	</command>
	
	<command>
		<name>createTemplate</name>
		<usercommand>true</usercommand>
		<parameters>
			<item getparam="true">
				<name>volumeid</name>
				<param>volumeid</param>
			</item>
			<item random="true">
				<name>name</name>
			</item>
			<item>
				<name>displaytext</name>
				<value>newtext</value>
			</item>
			<item>
				<name>osTypeId</name>
				<value>1</value>
			</item>
		</parameters>
		<returnvalue>
			<item setparam="true">
				<name>id</name>
				<param>privatetemplateid</param>
			</item>
			<item setparam="true">
				<name>name</name>
				<param>privatetemplatename</param>
			</item>
		</returnvalue>
	</command>
		
	<command>
		<name>associateIpAddress</name>
		<usercommand>true</usercommand>
		<parameters>
			<item getparam="true">
			    <name>zoneid</name>
				<param>globalzoneid</param>
			</item>
		</parameters>
		<returnvalue> 
			<item setparam="true">
				<name>ipaddress</name>
				<param>nonsourcenatpublicip1</param>
			</item>
		</returnvalue>
	</command>
	
	<command>
		<name>createSecurityGroup</name>
		<usercommand>true</usercommand>
		<parameters>
			<item random="true">
			    <name>name</name>
			</item>
			<item>
			    <name>description</name>
				<value>none</value>
			</item>
		</parameters>
		<returnvalue>
			<item setparam="true">
				<name>id</name>
				<param>pfgroupid</param>
			</item>
			<item setparam="true">
				<name>name</name>
				<param>pfgroupname</param>
				<value>pfgroup</value>
			</item>
		</returnvalue>
	</command>	
	
	<command>
		<name>createNetworkRule</name>
		<usercommand>true</usercommand>	
		<parameters>
			<item>
			    <name>publicport</name>
				<value>22</value>
			</item>
			<item>
			    <name>privateport</name>
				<value>22</value>
			</item>
			<item getparam="true">
			    <name>securitygroupid</name>
				<param>pfgroupid</param>
			</item>
		</parameters>
		<returnvalue>
			<item setparam="true">
				<name>id</name>
				<param>pfruleid</param>
			</item>
			<item getparam="true">
				<name>securitygroupid</name>
				<param>pfgroupid</param>
			</item>
		</returnvalue>
	</command>		
		
	<command>
		<name>createSecurityGroup</name>
		<usercommand>true</usercommand>
		<parameters>
			<item random="true">
			    <name>name</name>
			</item>
			<item>
			    <name>description</name>
				<value>none</value>
			</item>
		</parameters>
		<returnvalue>
			<item setparam="true">
				<name>id</name>
				<param>pfgroupid1</param>
			</item>
			<item setparam="true">
				<name>name</name>
				<param>pfgroupname1</param>
				<value>pfgroup</value>
			</item>
		</returnvalue>
	</command>	
	
	<command>
		<name>createNetworkRule</name>
		<usercommand>true</usercommand>
		<parameters>
			<item>
			    <name>publicport</name>
				<value>28</value>
			</item>
			<item>
			    <name>privateport</name>
				<value>28</value>
			</item>
			<item getparam="true">
			    <name>securitygroupid</name>
				<param>pfgroupid1</param>
			</item>
		</parameters>
		<returnvalue>
			<item setparam="true">
				<name>id</name>
				<param>pfruleid1</param>
			</item>
			<item getparam="true">
				<name>securitygroupid</name>
				<param>pfgroupid1</param>
			</item>
		</returnvalue>
	</command>		
	
	<command>
		<name>assignSecurityGroup</name>
		<usercommand>true</usercommand>
		<parameters>
			<item getparam="true">
			    <name>groupid</name>
				<param>pfgroupid1</param>
			</item>
			<item getparam="true">
			    <name>virtualmachineid</name>
				<param>vmid</param>
			</item>
			<item getparam="true">
			    <name>publicip</name>
				<param>nonsourcenatpublicip1</param>
			</item>
		</parameters>
	</command>	
	
	<command>
		<name>listRouters</name>
		<parameters>
			<item getparam="true">
			    <name>zoneid</name>
				<param>globalzoneid</param>
			</item>
			<item getparam="true">
				<name>account</name>
				<param>erroruseraccount</param>
			</item>
			<item>
				<name>domainid</name>
				<value>1</value>
			</item>
		</parameters>
		<returnvalue> 
			<item setparam="true">
				<name>id</name>
				<param>routerid</param>
			</item>
		</returnvalue>
	</command>
	
	<command>
		<name>stopRouter</name>
		<parameters>
			<item getparam="true">
				<name>id</name>
				<param>routerid</param>
			</item>
		</parameters>
	</command>
	
<!--  bring storage host down, try to deploy a third vm for the user - should fail; error event VM.CREATE should be generated; then bring storage host back -->
	<command>
		<name>mysqlupdate</name>
		<mysqlcommand>update host set status="Down" where type="Routing"</mysqlcommand>
	</command>

<!--test case 190 - try to deployVM when storage host is down -->
	<command>
		<name>deployVirtualMachine</name>
		<error>true</error>
		<testcase>190</testcase>
		<usercommand>true</usercommand>
		<parameters>
			<item>
			    <name>serviceofferingid</name>
				<value>1</value>
			</item>
			<item>
			    <name>diskofferingid</name>
				<value>1</value>
			</item>	
			<item getparam="true">
				<name>templateid</name>
				<param>globaltemplateid</param>
			</item>
			<item getparam="true">
			    <name>zoneid</name>
				<param>globalzoneid</param>
			</item>
		</parameters>
		<returnvalue>
			<item setparam="true">
				<name>ipaddress</name>
				<param>errorvmipaddress2</param>
			</item>
			<item setparam="true">
				<name>id</name>
				<param>errorvmid2</param>
			</item>
		</returnvalue>
	</command>
	
	<command>
		<name>mysqlupdate</name>
		<mysqlcommand>update host set status="Up" where type="Routing"</mysqlcommand>
	</command>
	
<!--  TRY TO ASSOC IP ADDRESS; APPLY SECURITY GROUP; ADD NETWORK RULE; RESET VM PASSWORD WHILE DOMR IS STOPPED -->

<!--test case 218 - try to assoc ip address when domR is stopped -->
	<command>
		<name>associateIpAddress</name>
		<testcase>218</testcase>
		<usercommand>true</usercommand>
		<error>true</error>
		<parameters>
			<item getparam="true">
			    <name>zoneid</name>
				<param>globalzoneid</param>
			</item>
		</parameters>
	</command>
	
<!--test case 985 - try to assign a security group when domR is stopped -->
	<command>
		<name>assignSecurityGroup</name>
		<usercommand>true</usercommand>
		<error>true</error>
		<testcase>985</testcase>
		<parameters>
			<item getparam="true">
			    <name>groupid</name>
				<param>pfgroupid</param>
			</item>
			<item getparam="true">
			    <name>virtualmachineid</name>
				<param>vmid</param>
			</item>
			<item getparam="true">
			    <name>publicip</name>
				<param>nonsourcenatpublicip1</param>
			</item>
		</parameters>
	</command>	
	
<!--test case 1012 - try to create a network rule when domR is stopped -->	
	<command>
		<name>createNetworkRule</name>
		<usercommand>true</usercommand>
		<error>true</error>
		<testcase>1012</testcase>
		<parameters>
			<item>
			    <name>publicport</name>
				<value>220</value>
			</item>
			<item>
			    <name>privateport</name>
				<value>220</value>
			</item>
			<item getparam="true">
			    <name>securitygroupid</name>
				<param>pfgroupid</param>
			</item>
		</parameters>
	</command>		
	
<!--test case 209 - try to reset password when domR is stopped -->
	<command>
		<name>resetPasswordForVirtualMachine</name>
		<testcase>209</testcase>
		<usercommand>true</usercommand>
		<error>true</error>
		<parameters>
			<item getparam="true">
				<name>id</name>
				<param>errorvmid1</param>
			</item>
		</parameters>
	</command>
	
	
<!--  BRING ROUTING HOSTS DOWN AND TRY TO START DOMR -->	
	<command>
		<name>mysqlupdate</name>
		<mysqlcommand>update host set status="Down" where type="Routing"</mysqlcommand>
	</command>

<!--test case 212 - try to start domR when routing hosts are disconnected -->
	<command>
		<name>startRouter</name>
		<testcase>212</testcase>
		<error>true</error>
		<parameters>
			<item getparam="true">
				<name>id</name>
				<param>routerid</param>
			</item>
		</parameters>
	</command>
	
<!-- BRING ROUTING HOSTS BACK AND START DOMR -->
	<command>
		<name>mysqlupdate</name>
		<mysqlcommand>update host set status="Up" where type="Routing"</mysqlcommand>
	</command>

	<command>
		<name>startRouter</name>
		<parameters>
			<item getparam="true">
				<name>id</name>
				<param>routerid</param>
			</item>
		</parameters>
		<returnvalue>
			<item getparam="true">
				<name>id</name>
				<param>routerid</param>
			</item>
		</returnvalue>
	</command>
	
<!--  test case 198 - stop vm and try to update vm to the huge service offering; should fail and Error event VM.Upgrade should be generated -->
	<command>
		<name>stopVirtualMachine</name>
		<parameters>
			<item getparam="true">
				<name>id</name>
				<param>errorvmid1</param>
			</item>
		</parameters>
	</command>

	<command>
		<name>changeServiceForVirtualMachine</name>
		<testcase>198</testcase>
		<usercommand>true</usercommand>
		<error>true</error>
		<parameters>
			<item getparam="true">
				<name>id</name>
				<param>errorvmid1</param>
			</item>
			<item>
				<name>serviceofferingid</name>
				<value>4</value>
			</item>
		</parameters>
	</command>
		
<!--  BRNIG ALL ROUTING HOSTS DOWN AND TRY TO CREATE/DELETE/ROLLBACK SNAPSHOT/TEMPLATE -->		
	<command>
		<name>agentcommand</name>
		<commandname>service xapi stop</commandname>
		<ip>192.168.161.22</ip>
		<ip>192.168.161.24</ip>
	</command>
	
<!--Test case 1016 - try to create a private template when routing host is down -->		
	<command>
		<name>createTemplate</name>
		<usercommand>true</usercommand>
		<testcase>1016</testcase>
		<error>true</error>
		<parameters>
			<item getparam="true">
				<name>volumeid</name>
				<param>volumeid</param>
			</item>
			<item random="true">
				<name>name</name>
			</item>
			<item>
				<name>displaytext</name>
				<value>newtext</value>
			</item>
			<item>
				<name>osTypeId</name>
				<value>1</value>
			</item>
		</parameters>
		<returnvalue>
			<item setparam="true">
				<name>id</name>
				<param>privatetemplateid</param>
			</item>
			<item setparam="true">
				<name>name</name>
				<param>privatetemplatename</param>
			</item>
		</returnvalue>
	</command>

<!--Test case 998 - try to create a snapshot when routing host is down -->				
	<command>
		<name>createSnapshot</name>
		<usercommand>true</usercommand>
		<testcase>998</testcase>
		<error>true</error>
		<parameters>
			<item getparam="true">
				<name>volumeid</name>
				<param>volumeid</param>
			</item>
		</parameters>
	</command>	
		
<!--Test case 999 - try to rollback to snapshot when routing host is down -->				
	<command>
		<name>rollbackToSnapshot</name>
		<testcase>999</testcase>
		<usercommand>true</usercommand>
		<error>true</error>
		<parameters>
			<item getparam="true">
				<name>id</name>
				<param>snapshotid</param>
			</item>
		</parameters>
	</command>		
	
<!--Test case 1002 - try to destroy the snapshot when routing host is down -->		
	<command>
		<name>destroySnapshot</name>
		<usercommand>true</usercommand>
		<error>true</error>
		<testcase>1002</testcase>
		<parameters>
			<item getparam="true">
				<name>id</name>
				<param>snapshotid</param>
			</item>
		</parameters>
	</command>	
		
	<command>
		<name>startVirtualMachine</name>
		<parameters>
			<item getparam="true">
				<name>id</name>
				<param>errorvmid1</param>
			</item>
		</parameters>
	</command>
	
	<command>
		<name>agentcommand</name>
		<commandname>service xapi start</commandname>
		<ip>192.168.161.22</ip>
		<ip>192.168.161.24</ip>
	</command>

<!--  BRING ALL COMPUTING/ROUTING HOTS DOWN AND VERIFY THAT VMSTOP/START/REBOOT; REMOVE SECURITY GROUP; DELETE NETWORK RULE ROUTER STOP/REBOOT; IP DISASSOC FAIL-->
	<command>
		<name>agentcommand</name>
		<commandname>service xapi stop</commandname>
		<ip>192.168.161.22</ip>
		<ip>192.168.161.24</ip>
	</command>
	
<!--test case 220 - try to disassociate ip address when routing host is down -->
	<command>
		<name>disassociateIpAddress</name>
		<testcase>220</testcase>
		<usercommand>true</usercommand>
		<error>true</error>
		<parameters>
			<item getparam="true">
				<name>ipaddress</name>
				<param>nonsourcenatpublicip1</param>
			</item>
		</parameters>
	</command>
	
<!--test case 984 and 1010 - try to remove security group when routing host is down -->	
	<command>
		<name>removeSecurityGroup</name>
		<usercommand>true</usercommand>
		<testcase>984</testcase>
		<error>true</error>
		<parameters>
			<item getparam="true">
			    <name>groupid</name>
				<param>pfgroupid1</param>
			</item>
			<item getparam="true">
			    <name>virtualmachineid</name>
				<param>errorvmid1</param>
			</item>
			<item getparam="true">
			    <name>publicip</name>
				<param>nonsourcenatpublicip1</param>
			</item>
		</parameters>
	</command>	
	
<!--test case 1013 - try to delete network rule when routing host is down -->		
	<command>
		<name>deleteNetworkRule</name>
		<usercommand>true</usercommand>
		<testcase>1013</testcase>
		<error>true</error>
		<parameters>
			<item getparam="true">
			    <name>id</name>
				<param>pfruleid</param>
			</item>
		</parameters>
	</command>	

<!--test case 194 - try to stop the vm when routing host is down -->	
	<command>
		<name>stopVirtualMachine</name>
		<testcase>194</testcase>
		<usercommand>true</usercommand>
		<error>true</error>	
		<parameters>
			<item getparam="true">
				<name>id</name>
				<param>errorvmid1</param>
			</item>
		</parameters>
	</command>
	
<!--test case 192 - try to start vm when routing host is down -->
	<command>
		<name>startVirtualMachine</name>
		<testcase>192</testcase>
		<usercommand>true</usercommand>
		<error>true</error>	
		<parameters>
			<item getparam="true">
				<name>id</name>
				<param>errorvmid2</param>
			</item>
		</parameters>
	</command>

<!--test case 195 - try to reboot vm when routing host is down -->
	<command>
		<name>rebootVirtualMachine</name>
		<testcase>195</testcase>
		<usercommand>true</usercommand>
		<error>true</error>	
		<parameters>
			<item getparam="true">
				<name>id</name>
				<param>errorvmid1</param>
			</item>
		</parameters>
	</command>

<!--test case 213 - try to stop domR when routing host is down -->
	<command>
		<name>stopRouter</name>
		<testcase>213</testcase>
		<error>true</error>
		<parameters>
			<item getparam="true">
				<name>id</name>
				<param>routerid</param>
			</item>
		</parameters>
	</command>

<!--test case 214 - try to reboot domR when routing host is down -->	
	<command>
		<name>rebootRouter</name>
		<testcase>214</testcase>
		<error>true</error>
		<parameters>
			<item getparam="true">
				<name>id</name>
				<param>routerid</param>
			</item>
		</parameters>
	</command>

	<command>
		<name>agentcommand</name>
		<commandname>service xapi start</commandname>
		<ip>192.168.161.22</ip>
		<ip>192.168.161.24</ip>
	</command>

</events>
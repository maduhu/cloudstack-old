# $Id: taglets-default.properties,v 1.27 2008/03/30 12:43:21 essmann Exp $
# 
# Copyright (c) 2002-2008 Bruno Essmann
# All rights reserved.

# Default Taglets Configuration File
# ==================================
#
# The taglets configuration uses a nested configuration that is built using
# configuration files and the system properties in the following order of
# preference:
# 
# 1.) System properties
#     Specify either with '-J-DTaglets.<property>=<value> on the command line 
#     to the JavaDoc executable or using the the attribute 'additionalparam'
#     in your ant javadoc tag: additionalparam="-J-DTaglets.<property>=<value>".
#
# 2.) User configuration file 'Taglets.ConfigurationFile'
#     Specify the file location of the property file using the system property 
#     'Taglets.ConfigurationFile' (see above).
#     This configuration will be read in addition to the default configuration,
#     but any values specified will override the default values.
#
# 3.) Classpath user configuration file '/taglets.properties'
#     If the file '/taglets.properties' can be found on the taglet classpath 
#     (i.e. the classpath of the taglets collection) it will be read. 
#     A simple method to configure the taglets collection is to specify the
#     JavaDoc taglet classpath to include the taglets.jar archive as well as
#     configuration directory containing the 'taglets.properties' file.
#
# 4.) Default configuration file '/META-INF/taglets-default.properties'
#     The default configuration file is included in the taglets.jar archive.
#     Use of the default configuration can be disabled by specifying the
#     system property 'Taglets.NoDefaultConfiguration' with a value of 'true'.
#
# Any configuration read is resolved in the above order of preference. All
# configurations found will be merged and evaluated in the given order.


# Taglet Driver Configuration
# ===========================
#
# Specifies a search path for configuration drivers.
# The search path is a comma separated value that contains path locations to
# driver archives. The driver archives are first searched in the classpath
# and then on the file system. Slashes (/) in the path name are converted to
# the file separator character of the executing OS.
 
Taglets.drivers= drivers/j2se15.jar, drivers/j2se14.jar


# Taglet Output Configuration
# ===========================
# 
# Determines if the taglets engine prints a "splash" message and if the taglets
# should produce verbose output during execution. Set 'debug' to 'true' to 
# enable debug messages of the engine itself.

Taglets.splash= true
Taglets.verbose= false
Taglets.debug= false


# Taglet Shutdown Hooks
# =====================

Taglets.shutdown.javadoc-overview-fixup= net.sourceforge.taglets.simple.shutdown.RegexReplacer
Taglets.shutdown.javadoc-overview-fixup.files= overview-frame.html
Taglets.shutdown.javadoc-overview-fixup.token.0=BODY BGCOLOR="white"
Taglets.shutdown.javadoc-overview-fixup.value.0=BODY BGCOLOR="white" STYLE="font-size: 10pt"
Taglets.shutdown.javadoc-html-fixup= net.sourceforge.taglets.simple.shutdown.RegexReplacer
Taglets.shutdown.javadoc-html-fixup.files= **/*.html
Taglets.shutdown.javadoc-html-fixup.token.0=FONT SIZE="\\+2"
Taglets.shutdown.javadoc-html-fixup.value.0=FONT STYLE="bigger-font"
Taglets.shutdown.javadoc-html-fixup.token.1=TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY=""
Taglets.shutdown.javadoc-html-fixup.value.1=TABLE WIDTH="100%" CLASS="section"
Taglets.shutdown.javadoc-html-fixup.token.2=src="/([^"]*)"
Taglets.shutdown.javadoc-html-fixup.value.2=src="./$1"
Taglets.shutdown.javadoc-html-fixup.token.3=href="/([^"]*)"
Taglets.shutdown.javadoc-html-fixup.value.3=href="./$1"
Taglets.shutdown.javadoc-html-fixup.token.4=<DT><B>See Also:</B><DD><A HREF=".*?constant-values\\.html.*?">Constant Field Values</A>
Taglets.shutdown.javadoc-html-fixup.value.4=
Taglets.shutdown.javadoc-stylesheet-copy= net.sourceforge.taglets.simple.shutdown.FileCopier
Taglets.shutdown.javadoc-stylesheet-copy.files= rsrc/stylesheet.css
Taglets.shutdown.javadoc-stylesheet-copy.todir= .
Taglets.shutdown.javadoc-resource-copy= net.sourceforge.taglets.simple.shutdown.FileCopier
Taglets.shutdown.javadoc-resource-copy.files= \
	rsrc/icon_code_large.gif, rsrc/icon_code_small.gif, \
	rsrc/icon_doc_large.gif, rsrc/icon_doc_small.gif, \
	rsrc/icon_done_large.gif, rsrc/icon_done_small.gif, \
	rsrc/icon_error_large.gif, rsrc/icon_error_small.gif, \
	rsrc/icon_info_large.gif, rsrc/icon_info_small.gif, \
	rsrc/icon_note_large.gif, rsrc/icon_note_small.gif, \
	rsrc/icon_equivalence_large.gif, rsrc/icon_equivalence_small.gif, \
	rsrc/icon_warning_large.gif, rsrc/icon_warning_small.gif
Taglets.shutdown.javadoc-resource-copy.todir= resources
Taglets.shutdown.javadoc-prettify-fixup= net.sourceforge.taglets.simple.shutdown.RegexReplacer
Taglets.shutdown.javadoc-prettify-fixup.files= **/*.html
Taglets.shutdown.javadoc-prettify-fixup.token.0=</HEAD>
Taglets.shutdown.javadoc-prettify-fixup.value.0=<script type="text/javascript" src="${docRoot}/resources/prettify.js"></script></HEAD>
Taglets.shutdown.javadoc-prettify-fixup.token.1=onload="windowTitle\\(\\);
Taglets.shutdown.javadoc-prettify-fixup.value.1=onload="prettyPrint();windowTitle();
Taglets.shutdown.javadoc-prettify-copy= net.sourceforge.taglets.simple.shutdown.FileCopier
Taglets.shutdown.javadoc-prettify-copy.files= rsrc/prettify.js
Taglets.shutdown.javadoc-prettify-copy.todir= resources

# Default Tag Ordering
# ====================
#
# Describes how the default tags provided by the standard doclet are ordered.
# Syntax is either 'Taglets.tag.<tagname>.before= <next-tagname>' or
# 'Taglets.tag.<tagname>.after= <previous-tagname>' and indicates that the
# the tag denoted by <tagname> should either appear before <next-tagname> or
# after <previous-tagname>. There is also a syntax that combines before and
# after that has a similar effect as listing both at the same time:
# 'Taglets.tag.<tagname>.between= <previous-tagname>, <next-tagname>'.
# Ordering is only relevant for block tags.
# Taglets will issue a warning if you create a cycle that cannot be resolved. 
#
# Note, there is currently no way to set the ordering of the 'Specified by:'
# and 'Overrides:' tags as their output is hard-coded to be in front of any
# other tags in JavaDoc.

Taglets.tag.param.before= return
Taglets.tag.return.before= throws
Taglets.tag.throws.before= exception
Taglets.tag.see.before= since
Taglets.tag.exception.before= since
Taglets.tag.since.after= version
Taglets.tag.version.before= author
Taglets.tag.author.before= serialData
Taglets.tag.serialData.before= factory
Taglets.tag.factory.before= see


# Custom Simple Block Tags
# ========================

Taglets.taglet.constant= net.sourceforge.taglets.simple.block.ConstantsBlockTaglet
Taglets.taglet.constant.dl.header= <b>Constant Field Value:</b>
Taglets.taglet.constant.before= since
Taglets.taglet.todo= net.sourceforge.taglets.simple.block.ParamBlockTaglet
Taglets.taglet.todo.dl.class= tagletsTodo
Taglets.taglet.todo.dl.header= <b>Todo:</b>
Taglets.taglet.todo.before= impl
Taglets.taglet.impl= net.sourceforge.taglets.simple.block.ParamBlockTaglet
Taglets.taglet.impl.dl.class= tagletsImpl
Taglets.taglet.impl.dl.header= <b>Implementation Notes:</b>
Taglets.taglet.impl.before= equivalence
Taglets.taglet.equivalence= net.sourceforge.taglets.simple.block.RegexBlockTaglet
Taglets.taglet.equivalence.dl.class= tagletsEquivalence
Taglets.taglet.equivalence.dl.header= <b>Equivalent To:</b>
Taglets.taglet.equivalence.preformatted= true
Taglets.taglet.equivalence.regex.pattern= (.*)
Taglets.taglet.equivalence.regex.replacement= <pre class="prettyprint">${1!}</pre>
Taglets.taglet.equivalence.before= note
Taglets.taglet.note= net.sourceforge.taglets.simple.block.ParamBlockTaglet
Taglets.taglet.note.dl.class= tagletsNote
Taglets.taglet.note.dl.header= <b>Notes:</b>
Taglets.taglet.note.before= info
Taglets.taglet.info= net.sourceforge.taglets.simple.block.ParamBlockTaglet
Taglets.taglet.info.dl.class= tagletsInfo
Taglets.taglet.info.dl.header= <b>Informations:</b>
Taglets.taglet.info.before= done
Taglets.taglet.done= net.sourceforge.taglets.simple.block.ParamBlockTaglet
Taglets.taglet.done.dl.class= tagletsDone
Taglets.taglet.done.dl.header= <b>Done:</b>
Taglets.taglet.done.before= warning
Taglets.taglet.warning= net.sourceforge.taglets.simple.block.ParamBlockTaglet
Taglets.taglet.warning.dl.class= tagletsWarning
Taglets.taglet.warning.dl.header= <b>Warnings:</b>
Taglets.taglet.warning.before= error
Taglets.taglet.error= net.sourceforge.taglets.simple.block.ParamBlockTaglet
Taglets.taglet.error.dl.class= tagletsError
Taglets.taglet.error.dl.header= <b>Errors:</b>
Taglets.taglet.error.before= param
Taglets.taglet.testcase= net.sourceforge.taglets.simple.block.RegexBlockTaglet
Taglets.taglet.testcase.dl.class= tagletsTestCase
Taglets.taglet.testcase.dl.header= <b>Testcases:</b>
Taglets.taglet.testcase.preformatted= true
Taglets.taglet.testcase.regex.pattern= (.*)
Taglets.taglet.testcase.regex.replacement= <pre class="prettyprint">${1!}</pre>
Taglets.taglet.testcase.between= param, see
Taglets.taglet.version= net.sourceforge.taglets.simple.block.IgnoreBlockTaglet
Taglets.taglet.version.regex.pattern= \
	(?:\\\u0024Revision: (.*?)\\s*\\$\\s*)?(?:\\\u0024Date: (.*?)\\s*\\$\\s*)?(.*+)
Taglets.taglet.version.regex.replacement= \
	${1?Version: }${1!}${1? }${2?(}${2!}${2?) }${3!}
Taglets.taglet.adm= net.sourceforge.taglets.simple.block.SimpleRegexBlockTaglet
Taglets.taglet.adm.regex.pattern= \
	(?:\\\u0024Revision: (.*?)\\s*\\$\\s*)?(?:\\\u0024Date: (.*?)\\s*\\$\\s*)?(.*+)
Taglets.taglet.adm.regex.replacement= \
	${1?<dt><b>Version:</b></dt><dd>}${1!}${1? }${2?(}${2!}${2?)}${1?</dd>}\
	${3?<dt><b>Version:</b></dt><dd>}${3!}${3?</dd>}\
	<dt><b>Maintainer:</b></dt><dd>${maintainer.name} \
	&lt;<a href="mailto:${maintainer.mail}?subject=${maintainer.project}: \
	${qualifiedName} ${1!}${1? }${2?(}${2!}${2?)}">${maintainer.mail}</a>&gt;</dd>
Taglets.taglet.adm.after= author
Taglets.taglet.adm.before= since
Taglets.taglet.since= net.sourceforge.taglets.simple.block.SinceBlockTaglet
Taglets.taglet.since.mandatory= false
Taglets.taglet.new= net.sourceforge.taglets.simple.block.RegexBlockTaglet
Taglets.taglet.new.regex.pattern= (.*)
Taglets.taglet.new.regex.replacement= ${1!<b>Not released yet.</b>}
Taglets.taglet.new.after= since

# Custom Simple Inline Tags
# =========================

Taglets.taglet.annotation= net.sourceforge.taglets.simple.inline.RegexInlineTaglet
Taglets.taglet.annotation.regex.pattern= (.*)
Taglets.taglet.annotation.regex.replacement= @${1!}
Taglets.taglet.at= net.sourceforge.taglets.simple.inline.RegexInlineTaglet
Taglets.taglet.at.regex.pattern= (.*)
Taglets.taglet.at.regex.replacement= @${1!}
Taglets.taglet.example= net.sourceforge.taglets.simple.inline.RegexInlineTaglet
Taglets.taglet.example.preformatted= true
Taglets.taglet.example.regex.pattern= (?:\\&quot;(.*?)\\&quot;\\s*)?(.*+)
Taglets.taglet.example.regex.replacement= \
	<div class="tagletsExample">\
	<p><strong>${1!Example:}</strong></p><pre class="prettyprint">${2}</pre></div>
Taglets.taglet.markupExample= net.sourceforge.taglets.simple.inline.RegexInlineTaglet
Taglets.taglet.markupExample.literal= false
Taglets.taglet.markupExample.preformatted= true
Taglets.taglet.markupExample.regex.pattern= (?:"(.*?)"\\s*)?(.*+)
Taglets.taglet.markupExample.regex.replacement= \
	<div class="tagletsExample">\
	<p><strong>${1!Example:}</strong></p><pre>${2}</pre></div>
Taglets.taglet.source= net.sourceforge.taglets.simple.inline.RegexInlineTaglet
Taglets.taglet.source.preformatted= true
Taglets.taglet.source.regex.pattern= (?:\\&quot;(.*?)\\&quot;\\s*)?(.*+)
Taglets.taglet.source.regex.replacement= \
	<div class="tagletsSource">\
	${1?<p><strong>}${1!}${1?</strong></p>}<pre class="prettyprint">${2}</pre></div>
Taglets.taglet.markupSource= net.sourceforge.taglets.simple.inline.RegexInlineTaglet
Taglets.taglet.markupSource.literal= false
Taglets.taglet.markupSource.preformatted= true
Taglets.taglet.markupSource.regex.pattern= (?:"(.*?)"\\s*)?(.*+)
Taglets.taglet.markupSource.regex.replacement= \
	<div class="tagletsSource">\
	${1?<p><strong>}${1!}${1?</strong></p>}<pre>${2}</pre></div>
Taglets.taglet.stickyWarning= net.sourceforge.taglets.simple.inline.RegexInlineTaglet
Taglets.taglet.stickyWarning.regex.pattern= (?:"(.*?)"\\s*)?(.*+)
Taglets.taglet.stickyWarning.regex.replacement= \
	<div class="tagletsStickyWarning">\
	<p><strong>${1!Warning:}</strong></p><p>${2}</p></div>
Taglets.taglet.stickyInfo= net.sourceforge.taglets.simple.inline.RegexInlineTaglet
Taglets.taglet.stickyInfo.regex.pattern= (?:"(.*?)"\\s*)?(.*+)
Taglets.taglet.stickyInfo.regex.replacement= \
	<div class="tagletsStickyInfo">\
	<p><strong>${1!Info:}</strong></p><p>${2}</p></div>
Taglets.taglet.stickyNote= net.sourceforge.taglets.simple.inline.RegexInlineTaglet
Taglets.taglet.stickyNote.regex.pattern= (?:"(.*?)"\\s*)?(.*+)
Taglets.taglet.stickyNote.regex.replacement= \
	<div class="tagletsStickyNote">\
	<p><strong>${1!Note:}</strong></p><p>${2}</p></div>
Taglets.taglet.stickyError= net.sourceforge.taglets.simple.inline.RegexInlineTaglet
Taglets.taglet.stickyError.regex.pattern= (?:"(.*?)"\\s*)?(.*+)
Taglets.taglet.stickyError.regex.replacement= \
	<div class="tagletsStickyError">\
	<p><strong>${1!Error:}</strong></p><p>${2}</p></div>
Taglets.taglet.stickyDone= net.sourceforge.taglets.simple.inline.RegexInlineTaglet
Taglets.taglet.stickyDone.regex.pattern= (?:"(.*?)"\\s*)?(.*+)
Taglets.taglet.stickyDone.regex.replacement= \
	<div class="tagletsStickyDone">\
	<p><strong>${1!Done:}</strong></p><p>${2}</p></div>
Taglets.taglet.table= net.sourceforge.taglets.simple.inline.TableInlineTaglet
Taglets.taglet.className= net.sourceforge.taglets.simple.inline.ClassNameInlineTaglet

Taglets.taglet.always= net.sourceforge.taglets.simple.inline.RegexInlineTaglet
Taglets.taglet.always.regex.pattern= (.*)
Taglets.taglet.always.regex.replacement= <code>${1!}</code>, always.
Taglets.taglet.never= net.sourceforge.taglets.simple.inline.RegexInlineTaglet
Taglets.taglet.never.regex.pattern= (.*)
Taglets.taglet.never.regex.replacement= never.
Taglets.taglet.nevernull= net.sourceforge.taglets.simple.inline.ParamInlineTaglet
Taglets.taglet.notnull= net.sourceforge.taglets.simple.inline.ParamInlineTaglet

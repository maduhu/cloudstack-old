#!/usr/bin/env python

"""builds the entire stack"""
#For every matching build change here, that produces new installable
#files, the cloud.spec file and the Debian control files must be
#revised and tested.

import shutil,os
import Utils,Node,Options,Logs,Scripting,Environment,Build,Configure
from os import unlink as _unlink, makedirs as _makedirs, getcwd as _getcwd, chdir as _chdir
from os.path import abspath as _abspath, basename as _basename, dirname as _dirname, exists as _exists, isdir as _isdir, split as _split, join as _join, sep, pathsep, pardir
from glob import glob as _glob
import zipfile,tarfile
try:
  from os import chmod as _chmod,chown as _chown
  import pwd,stat,grp
except ImportError:
  _chmod,_chown,pwd,stat,grp = (None,None,None,None,None)

required_env = [
	"APISERVERLOG",
	"MSLOG",
	"PIDDIR",
	"CPPATH",
	"AGENTSIMULATORCLASSPATH",
	"SYSTEMJAVADIR",
	"USAGELOG",
]
for e in required_env:
	if e not in bld.env: raise Utils.WafError("configure required: new variable %s added"%e)
	
sourcedir = bld.srcnode.abspath()
builddir = bld.path.abspath(bld.env)
buildpremium = _exists(_join(sourcedir,"premium"))
filelist = bld.path.ant_glob

sccsinfo = _join(sourcedir,"sccs-info")
if _exists(sccsinfo): bld.install_files("${DOCDIR}","sccs-info")

# ==================== Java compilation ===========================

def runant(*args):
	if buildpremium: anttgt = "sendjarfiles-premium"
	else: anttgt = "sendjarfiles-oss"

	environ = dict(os.environ)
	environ["CATALINA_HOME"] = bld.env.TOMCATHOME 
	environ["ANT_HOME"] = _join(sourcedir,"tools","ant","apache-ant-1.8.0")
	if bld.env.DISTRO == "Windows":
		stanzas = [
			_join(environ["ANT_HOME"],"bin\\ant.bat"),
			"-Dimpl.version=%s"%bld.env.Specification_Version,
			"-Dwaf.classpath=\"%s\""%(bld.env.CLASSPATH.replace(os.pathsep,",")),
			"-Dtarget.dir=%s"%_join(builddir,"ant"),
			"-Dwaf.artifacts=%s"%builddir,
			anttgt,
		]
	else:
		stanzas = [
			_join(environ["ANT_HOME"],"bin/ant"),
			"-Dimpl.version=%s"%bld.env.Specification_Version,
			"-Dwaf.classpath=%s"%(bld.env.CLASSPATH.replace(os.pathsep,",")),
			"-Dtarget.dir=%s"%_join(builddir,"ant"),
			"-Dwaf.artifacts=%s"%builddir,
			anttgt,
		]
	Utils.exec_command(" ".join(stanzas),cwd=sourcedir,env=environ,log=True)
	return 0

jartgts = 'cloud-utils.jar cloud-core.jar cloud-server.jar cloud-agent.jar cloud-console-common.jar cloud-test.jar cloud-agent-simulator.jar cloud-console-proxy.jar VMOpsConsoleApplet.jar'
if buildpremium: jartgts = jartgts + ' cloud-premium.jar cloud-usage.jar cloud-core-extras.jar cloud-console-proxy-premium.jar'

tgen = bld(rule=runant, name='compilejava', source='build.xml', always=True, target=jartgts)

bld.install_files('${JAVADIR}','cloud-utils.jar')
bld.install_files('${JAVADIR}','cloud-core.jar')
bld.install_files('${JAVADIR}','cloud-server.jar')
bld.install_files('${JAVADIR}','cloud-agent.jar')
bld.install_files('${JAVADIR}','cloud-test.jar')
bld.install_files('${JAVADIR}','cloud-agent-simulator.jar')
if buildpremium:
	bld.install_files('${JAVADIR}','cloud-premium.jar')
	bld.install_files('${JAVADIR}','cloud-usage.jar')
	bld.install_files('${JAVADIR}','cloud-core-extras.jar')

# ======================= End Java compilation ======================


# =================== C / Python compilation =========================

if bld.env.DISTRO not in ['Windows','Mac']:
	# build / install declarations of the daemonization utility - except for Windows
	bld(
		name='daemonize',
		features='cc cprogram',
		source='daemonize/daemonize.c',
		target='daemonize/cloud-daemonize')

	# build / install declarations of vnet
	files = """vnetd/connection.c vnetd/select.c vnetd/timer.c vnetd/spinlock.c vnetd/skbuff.c
		vnetd/vnetd.c vnet-module/skb_util.c vnet-module/sxpr_util.c vnet-module/timer_util.c
		vnet-module/etherip.c vnet-module/vnet.c vnet-module/vnet_eval.c vnet-module/vnet_forward.c
		vnet-module/vif.c vnet-module/tunnel.c vnet-module/sa.c vnet-module/varp.c
		libxutil/allocate.c libxutil/enum.c libxutil/file_stream.c libxutil/hash_table.c
		libxutil/iostream.c libxutil/lexis.c libxutil/socket_stream.c libxutil/string_stream.c
		libxutil/sxpr.c libxutil/sxpr_parser.c libxutil/sys_net.c libxutil/sys_string.c libxutil/util.c"""
	files = [ "vnet/src/%s"%s for s in Utils.to_list(files) ]
	bld(
		name='vnetd',
		features='cc cprogram',
		source= files,
		includes="vnet/src/libxutil vnet/src/vnet-module vnet/src/vnetd",
		lib='dl pthread'.split(),
		target='vnet/%s-vnetd'%bld.env.PACKAGE,
		install_path="${SBINDIR}"
		)
	bld.install_as("${SBINDIR}/%s-vn"%bld.env.PACKAGE,   "vnet/vn",   chmod=0755)
	obj = bld(features = 'py',name='vnetpy')
	obj.find_sources_in_dirs('vnet/lib', exts=['.py'])

# ===================== End C / Python compilation ==========================


# ================ Third-party / dependency installation ===============

bld.install_files('${JAVADIR}','deps/*.jar')
if buildpremium: bld.install_files('${PREMIUMJAVADIR}','thirdparty/*.jar')

# =================== End 3rdparty/dep install ========================


# ================ Creation of patch.tgz's ============================

def tar_up(task):
	tgt = task.outputs[0].bldpath(task.env)
	if _exists(tgt): _unlink(tgt)
	z = tarfile.open(tgt,"w:gz")
	for inp in task.inputs:
		src = inp.srcpath(task.env)
		srcname = "/".join(src.split("/")[6:]) # we anchor the paths to the root
		ti = tarfile.TarInfo(srcname)
		ti.mode = 0755
		ti.size = os.path.getsize(src)
		f = file(src)
		z.addfile(ti,fileobj=f)
		f.close()
	z.close()
	return 0

if bld.env.DISTRO != "Windows":
	for virttech in ["xenserver","kvm"]:
		patchfiles = filelist('scripts/network/domr/%s/patches/**'%virttech,src=True,bld=False,dir=False,flat=True)
		tgen = bld(
			rule   = tar_up,
			source = patchfiles,
			target = '%s-patch.tgz'%virttech,
			name   = '%s-patch_tgz'%virttech,
		)
		bld.install_as("${AGENTLIBDIR}/scripts/vm/hypervisor/%s/patch/patch.tgz"%virttech, "%s-patch.tgz"%virttech)

# ================== End creation of patch.tgz's ====================


# ================== systemvm patch creation ====================

deps = " ".join( Utils.to_list(
	"""
	deps/cloud-xmlrpc-client-3.1.3.jar
	deps/cloud-xmlrpc-common-3.1.3.jar
	deps/cloud-log4j.jar
	deps/cloud-gson-1.3.jar
	deps/cloud-apache-log4j-extras-1.0.jar
	deps/cloud-libvirt-0.4.5.jar
	deps/cloud-jna.jar
	deps/cloud-cglib.jar
	"""
) )
thirdparties = " ".join( Utils.to_list(
	"""
	thirdparty/xmlrpc-client-3.1.3.jar
	thirdparty/xmlrpc-common-3.1.3.jar
	thirdparty/ws-commons-util-1.0.2.jar
	thirdparty/log4j-1.2.15.jar
	thirdparty/gson-1.3.jar
	thirdparty/apache-log4j-extras-1.0.jar
	thirdparty/commons-httpclient-3.1.jar
	thirdparty/commons-logging-1.1.1.jar
	thirdparty/commons-collections-3.2.1.jar
	thirdparty/commons-codec-1.4.jar
	thirdparty/commons-pool-1.4.jar
	thirdparty/libvirt-0.4.5.jar
	thirdparty/jna.jar
	thirdparty/cglib-nodep-2.2.jar
	"""
) )

patterns = Utils.to_list(
	"""
	console-proxy/css/**
	console-proxy/images/**
	console-proxy/js/**
	console-proxy/ui/**
	console-proxy/conf/**
	console-proxy/scripts/*.sh
	console-proxy/vm-script/*.sh
	scripts/storage/secondary/*sh
	"""
)
premiumpatterns = patterns + ["console-proxy-premium/certs/**"]

artifacts = "VMOpsConsoleApplet.jar " + " ".join( "cloud-%s.jar"%j for j in "console-proxy console-common agent utils core".split() )
premiumartifacts = artifacts + " cloud-console-proxy-premium.jar"

sources = " ".join( [ filelist(x,src=True,bld=False,dir=False,flat=True) for x in patterns ] )
premiumsources = " ".join( [ filelist(x,src=True,bld=False,dir=False,flat=True) for x in premiumpatterns ] )

systemfiles = [ (f,_join(".",_basename(f))) for f in bld.env.SYSTEMCLASSPATH.split(pathsep) ]
systems = " ".join( [ n[1] for n in systemfiles ] )
systemtargetdir = _join(builddir,".")
def copydeps(task):
	Utils.check_dir(systemtargetdir)
	for src,tgt in systemfiles: shutil.copy(src,systemtargetdir)
	return 0
def zip_up(task):
	tgt = task.outputs[0].bldpath(task.env)
	if _exists(tgt): _unlink(tgt)
	z = zipfile.ZipFile(tgt,"w")
	for inp in task.inputs:
		if inp.id&3==Node.BUILD:
			src = inp.bldpath(task.env)
			srcname = "/".join(src.split("/")[1:])
		else:
			src = inp.srcpath(task.env)
			srcname = "/".join(src.split("/")[2:])
		if srcname.startswith('scripts/run') or srcname.startswith('scripts/config_ssl') \
			or srcname.startswith('scripts/config_auth') or srcname.startswith('scripts/ssvm-check'): srcname = "/".join(srcname.split("/")[1:])
		elif srcname.startswith('storage'): srcname = "scripts/" + srcname
		elif srcname.startswith('VMOpsConsoleApplet'): srcname = "applet/" + srcname
		elif srcname.startswith('certs'): srcname = srcname
		z.write(src,srcname)
	z.close()
	return 0

if bld.env.DISTRO not in ["Windows","Mac"]:
	tgen = bld(
		rule   = copydeps,
		source = 'wscript',
		target = systems,
		name   = 'getsystemjars',
	)
	tgen = bld(
		rule   = zip_up,
		source = " ".join( [sources,artifacts,deps,systems] ),
		target = 'systemvm.zip',
		name   = 'systemvm_zip',
		after  = 'copydeps getsystemjars compilejava',
	)
	bld.process_after(tgen)
if buildpremium:
	tgen = bld(
		rule   = zip_up,
		source = " ".join( [premiumsources,premiumartifacts,thirdparties] ),
		target = 'systemvm-premium.zip',
		name   = 'systemvm-premium_zip',
		after  = 'compilejava',
	)
	bld.process_after(tgen)

if bld.env.DISTRO in [ "Windows", "Mac"]:
	pass
else:
	bld.install_files("${AGENTLIBDIR}/scripts/vm/hypervisor", "systemvm.zip")

if buildpremium:
	if bld.env.DISTRO in [ "Windows", "Mac"]:
		bld.install_files("${AGENTLIBDIR}/scripts/vm/hypervisor/kvm/patch", "systemvm-premium.zip")
		bld.install_files("${AGENTLIBDIR}/scripts/vm/hypervisor/xenserver/patch", "systemvm-premium.zip")
	else:
		bld.install_files("${AGENTLIBDIR}/scripts/vm/hypervisor", "systemvm-premium.zip")
		

# ================== End systemvm patch creation ====================


# =================== Empty directory / symlink creation on install target ====================

# 7. make log and cache dirs (this actually runs first)
if bld.env.DISTRO in 'Windows Mac': pass
else:
	x = ("root",bld.env.MSUSER)
	directories = [
		("${MSLOGDIR}",0770,x),
		("${AGENTLOGDIR}",0770,x),
		("${USAGELOGDIR}",0770,x),
		("${LOCALSTATEDIR}/cache/${MSPATH}",0770,x),
		("${LOCALSTATEDIR}/cache/${MSPATH}/temp",0770,x),
		("${LOCALSTATEDIR}/cache/${MSPATH}/work",0770,x),
		("${SHAREDSTATEDIR}/${MSPATH}",0770,x),
		("${MSMNTDIR}",0770,x),
		("${MSCONF}/Catalina",0770,x),
		("${MSCONF}/Catalina/localhost",0770,x),
		("${MSCONF}/Catalina/localhost/client",0770,x),
		("${PIDDIR}",0755,("root","root")),
		("${LOCKDIR}",0755,("root","root")),
	]
	
	for a,mode,owner in directories:
		s = bld.subst_add_destdir(a,bld)
		bld.install_dir(a)
		bld.setownership(a,owner[0],owner[1],mode)

	# 8. create environment symlinks
	symlinks = [
		('${MSENVIRON}/bin', '${TOMCATHOME}/bin'),
		('${MSENVIRON}/lib',  '${TOMCATHOME}/lib'),
		('${MSENVIRON}/logs', "${MSLOGDIR}"),
		('${MSENVIRON}/temp', '${LOCALSTATEDIR}/cache/${MSPATH}/temp'),
		('${MSENVIRON}/work','${LOCALSTATEDIR}/cache/${MSPATH}/work'),
		('${MSENVIRON}/conf', '${SYSCONFDIR}/${MSPATH}'),
		("${AGENTLIBDIR}/css", '${CPLIBDIR}/css'),
		("${AGENTLIBDIR}/images", '${CPLIBDIR}/images'),
		("${AGENTLIBDIR}/js", '${CPLIBDIR}/js'),
		("${AGENTLIBDIR}/ui", '${CPLIBDIR}/ui'),
		("${AGENTLIBDIR}/scripts/vm/hypervisor/xenserver/patch/systemvm.zip","${AGENTLIBDIR}/scripts/vm/hypervisor/systemvm.zip"),
		("${AGENTLIBDIR}/scripts/vm/hypervisor/kvm/patch/systemvm.zip","${AGENTLIBDIR}/scripts/vm/hypervisor/systemvm.zip"),
	]
	if buildpremium:
		symlinks = symlinks + [
			("${AGENTLIBDIR}/scripts/vm/hypervisor/xenserver/patch/systemvm-premium.zip","${AGENTLIBDIR}/scripts/vm/hypervisor/systemvm-premium.zip"),
			("${AGENTLIBDIR}/scripts/vm/hypervisor/kvm/patch/systemvm-premium.zip","${AGENTLIBDIR}/scripts/vm/hypervisor/systemvm-premium.zip"),
		]

	for lnk,dst in symlinks: bld.symlink_as(lnk,Utils.subst_vars(dst,bld.env))

# ================== End empty directory / symlink creation on install target =====================


# ================== Subst / installation of scripts in bin directories ========================

bld.install_files_filtered("${LIBEXECDIR}","*/libexec/*",chmod=0755)
bld.install_files_filtered("${BINDIR}","*/bindir/*",chmod=0755)

# ================== End subst / installation of scripts in bin directories ========================


# ================== Installation of scripts / bindirs / configuration files ===========================

# build / install declarations of test project
proj = 'test'
start_path = bld.path.find_dir("test/scripts")
bld.install_files('${LIBDIR}/${PACKAGE}/test',
	start_path.ant_glob("**",src=True,bld=False,dir=False,flat=True),
	postpone=False,cwd=start_path,relative_trick=True)
start_path = bld.path.find_dir("test/metadata")
bld.install_files('${SHAREDSTATEDIR}/${PACKAGE}/test',
	start_path.ant_glob("**",src=True,bld=False,dir=False,flat=True),
	postpone=False,cwd=start_path,relative_trick=True)
bld.install_files('${SYSCONFDIR}/%s/%s'%(bld.env.PACKAGE,proj),'%s/conf/*'%proj) # install config

# build / install declarations of server project
bld.install_files("${MSENVIRON}/webapps/client/WEB-INF",'server/web.xml') # install web.xml file

# build / install declarations of agent project
proj = 'agent'
start_path = bld.path.find_dir(proj)
bld.install_files("${AGENTLIBDIR}",
	start_path.ant_glob("storagepatch/**",src=True,bld=False,dir=False,flat=True),
	postpone=False,cwd=start_path,relative_trick=True)
bld.install_files_filtered("${AGENTSYSCONFDIR}","%s/conf/*"%proj)
bld.install_files_filtered("${BINDIR}","%s/bindir/*"%proj,chmod=0755)

# build / install declarations of client UI project
proj = 'ui'
start_path = bld.path.find_dir("ui")
patterns = '*.html *.ico content/** css/** images/** scripts/** test/**'
bld.install_files("${MSENVIRON}/webapps/client",
	start_path.ant_glob(patterns,src=True,bld=False,dir=False,flat=True),
	postpone=False,cwd=start_path,relative_trick=True)

# build / install declarations of agent scripts project
start_path = bld.path.find_dir("scripts")
globs = ["**/*.sh","**/*.py","**/*.exp"]
for glb in globs:
	bld.install_files("${AGENTLIBDIR}/scripts",
		start_path.ant_glob(glb,src=True,bld=False,dir=False,flat=True),
		postpone=False,cwd=start_path,relative_trick=True,chmod=0755)
def m(x,mode):
	filez = start_path.ant_glob(x,src=True,bld=False,dir=False,flat=True)
	bld.install_files("${AGENTLIBDIR}/scripts",filez,postpone=False,
		cwd=start_path,relative_trick=True,chmod=mode)
m("network/domr/id_rsa",0600)
bld.setownership("${AGENTLIBDIR}/scripts/network/domr/id_rsa",bld.env.MSUSER,"root")
m("util/qemu-ifup",0755)
m("vm/hypervisor/xenserver/patch/**",0755)
m("vm/hypervisor/xenserver/patch/patch",0644)

# substitute and install generic tomcat config
bld.install_files_filtered("${MSCONF}",filelist("*/tomcatconf/*"))
bld.install_files("${MSCONF}",'client/tomcatconf/db.properties',chmod=0640)
bld.setownership("${MSCONF}/db.properties","root",bld.env.MSUSER)

# apply distro-specific config on top of the 'all' generic cloud-management config
distrospecificdirs=_glob(_join("*","distro",bld.env.DISTRO.lower(),"*"))
for dsdir in distrospecificdirs:
	start_path = bld.srcnode.find_dir(dsdir)
	subpath,varname = _split(dsdir)
	dsdirwithvar = _join("${%s}"%varname)
	files = filelist('%s/**'%dsdir,src=True,bld=False,dir=False,flat=True)
	mode = 0644
	if "SYSCONFDIR" in dsdir: mode = 0755
	bld.install_files_filtered(dsdirwithvar, files, postpone=False, cwd=start_path, relative_trick=True,chmod=mode)

# build / install declarations of usage
if buildpremium:
	bld.install_files_filtered("${USAGESYSCONFDIR}","usage/conf/*")
	bld.install_files("${USAGESYSCONFDIR}",'client/tomcatconf/db.properties',chmod=0640)
	bld.setownership("${USAGESYSCONFDIR}/db.properties","root",bld.env.MSUSER)

# install db data files
bld.install_files_filtered("${SETUPDATADIR}",filelist("*/db/*",excl=Node.exclude_regs + "\ncloud-gate"))

# ================== End installation of scripts / bindirs / configuration files ===========================
